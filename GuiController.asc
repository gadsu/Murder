// new module script

void SetVisibility(GUIControl* control)
{ // Sets the Visible and Clicable state of the GUIControl to it's opposite state;
  control.Visible = !control.Visible;
  control.Clickable = !control.Clickable;
}

void SetVisibilityGUI(GUI* control)
{ // Sets the Visible and Clicable state of the GUI to it's opposite state;
  control.Visible = !control.Visible;
  control.Clickable = !control.Clickable;
}

void GuiUpdate(GUI* control)
{ // Updates the update gui when an update occurs.
  String updateText = ""; // Stores the update string to be displayed;
  
  switch(control)
  { // Determines the initial string according to the GUI being updated;
    case gMap: updateText = "Map";
      break;
    case gNotes: updateText = "Notes";
      break;
    case gPOI: updateText = "POI";
      break;
  }
  
  lblUpdate.Text = updateText; // adds the updated field to the text;
  lblUpdate.Text = lblUpdate.Text.Append("\n"); // appends a new line into the text;
  lblUpdate.Text = lblUpdate.Text.Append("updated!"); // appends the notification updated to the new line;
  SetVisibilityGUI(gUpdate); // Displays the update gui;
  Wait(50);
  SetVisibilityGUI(gUpdate); // Removes the notification;
}

void MakeButtonsClickable(GUIControl* control)
{// Changes the state of the control passed and visually reflect that changed state;
  int tempGraphic; // stores the graphic needed to swap the states;
  control.Clickable = !control.Clickable; // reverses the clickable state;
  
  /* Sets the new grapich state */
  tempGraphic = control.AsButton.PushedGraphic; 
  control.AsButton.PushedGraphic = control.AsButton.NormalGraphic;
  control.AsButton.NormalGraphic = tempGraphic;
  /******************************/
}

bool GetDisplayState(GUI* control)
{ // determines whether or not the state is changeable.
  if(control.Visible) // if the passed control is visible then by default the state is changeble;
    return true;
  else
  { // if the control is not visible then determine if any other gui is currently visible;
    /* if any of these gui's is visible then return the changestate as not being possible; */
    if(gNotes.Visible)
      return false;
      
    if(gItems.Visible)
      return false;
      
    if(gDialogH.Visible)
      return false;
      
    if(gBlackberry_Main.Visible)
      return false;
      
    if(gBlackberry_Options.Visible)
      return false;
      
    if(gMap.Visible)
      return false;
      
    if(gPOI.Visible)
      return false;
    /***************************************************************************************/
  }
  
  return true; // if the control is not visible and no other gui is visible then the state is changeable;
}

bool CheckAllDisplayStates()
{  
  if(!GetDisplayState(gNotes))
    return true;
  else if(!GetDisplayState(gDialogH))
    return true;
  else if(!GetDisplayState(gBlackberry_Main))
    return true;
  else if(!GetDisplayState(gBlackberry_Options))
    return true;
  else if(!GetDisplayState(gMap))
    return true;
  else if(!GetDisplayState(gPOI))
    return true;
  else
    return false;
}

void BeginLoops()
{ // Sets the button state at the beginning of the loops;
  MakeButtonsClickable(btnGerald);
  MakeButtonsClickable(btnMary);
  MakeButtonsClickable(btnLibrary);
  MakeButtonsClickable(btnPolice);
  MakeButtonsClickable(btnChurch);
  MakeButtonsClickable(btnPeters);
  MakeButtonsClickable(btnTaxidermy);
  MakeButtonsClickable(btnLegion);
  MakeButtonsClickable(btnGas);
  MakeButtonsClickable(btnKKitchen);
  MakeButtonsClickable(btnSwamp);
  MakeButtonsClickable(btnTHall);
  MakeButtonsClickable(btnHartman);
}

void MapNewGame()
{ // Sets the new game map button visibility;
  SetVisibility(btnGerald);
  SetVisibility(btnMary);
  SetVisibility(btnPolice);
  SetVisibility(btnChurch);
  SetVisibility(btnPeters);
  SetVisibility(btnTaxidermy);
  SetVisibility(btnLegion);
  SetVisibility(btnGas);
  SetVisibility(btnKKitchen);
  SetVisibility(btnLibrary);
  SetVisibility(btnSwamp);
  SetVisibility(btnTHall);
  SetVisibility(btnHartman);
}