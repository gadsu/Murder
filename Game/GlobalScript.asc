// main global script file

// Globals from GUIscript
import int ActionLabelColorHighlighted;
import char key_l_yes, key_u_yes, key_l_no, key_u_no; 
import int action_l_keycode[A_COUNT_]; 
import int action_u_keycode[A_COUNT_];
import int GStopsaveitem;
import int listBoxGap;
import int lang;
import InventoryItem*ItemGiven; 

// Door IDs in use are:
///////////////////////////////////////////////
// ID 20 - Sample Door in Room 1
///////////////////////////////////////////////

// =======================================================================================

SaveFileData thisSaveFile;
export thisSaveFile;

String saveFileString[50];

String ConstructFilePath(String dir, String fileName, String fileType)
{ // Constructs the file path for this file.
  String temp;
  temp = dir;
  temp = temp.Append(fileName);
  temp = temp.Append(fileType);
  return temp;
}

int GetNumLines(File* f)
{
  int count = 0;
  while(!f.EOF)
  {
    f.ReadRawLineBack();
    count++;
  }
  return count;
}

void PopulateSaveLoadLists()
{
  int i = 0;
  lstLoad.Clear();
  lstSave.Clear();
  for(i = 0; i < 50; i++)
  {
    lstLoad.AddItem(saveFileString[i]);
    lstSave.AddItem(saveFileString[i]);
  }
}

void Initialize_SaveFileStruct()
{
  thisSaveFile.day = 0;
  thisSaveFile.hour = 0.0;
  thisSaveFile.loop = 0;
  thisSaveFile.currentRoom = 300;
  thisSaveFile.x = 0;
  thisSaveFile.y = 0;
  thisSaveFile.imageToUse = new int[Game.CharacterCount];
  thisSaveFile.metCharacters = new String[Game.CharacterCount];
  thisSaveFile.notesCount = 0;
  thisSaveFile.prfmrdAction = false;
}

void Initialize_Save_Load()
{
  txtSaveInput.Text = "";
  lstSave.AddItem("New Save");
  saveFileString[0] = "New Save";
  int i = 0;
  for(i = 1; i < 50; i++)saveFileString[i] = "";
  String s = ConstructFilePath("$SAVEGAMEDIR$/", "MMiM", ".txt");
  if(File.Exists(s))
  {
    File* f = File.Open(s, eFileRead);
    int saves = GetNumLines(f);
    int pos;
    pos = f.Position;
    f.Seek(-pos);
    String s1;
    int buffer = 0;
    for(i = 0; i < saves; i++)
    {
      s1 = f.ReadRawLineBack();
      if(s1 != "")
        saveFileString[i+(1-buffer)] = s1;
      else
        buffer++;
    }
    f.Close();
    
    PopulateSaveLoadLists();
  }
}
function game_start() {

  String tr_lang;
  // --- translate GUI action buttons ---
  tr_lang = GetTranslation("GUI_LANGUAGE");
  tr_lang = tr_lang.LowerCase();
  
  if (tr_lang == "de") {
    lang = eLangDE;
  }
  else if (tr_lang =="es") {
    lang = eLangES;
  }
  else if (tr_lang =="fr") {
    lang = eLangFR;
  }  
  else if (tr_lang =="en") {
    lang = eLangEN;
  }
  else if (tr_lang =="it") {
    lang = eLangIT;
  }     
  InitGuiLanguage();
  AdjustGUIText();
  // --- Set default Door strings (Look, locked and wrong item)
  set_door_strings("The door looks solid.","It is locked.","I can't unlock it with that.","I have to close it first.","Now it's unlocked.","The door is locked again.");
  // --- initialize game settings ---
  SetDefaultAction(eMA_WalkTo);    
  set_double_click_speed(GetGameSpeed()/4);
  
  // --- set the pixel gap for listbox items according to the screen res
  if (System.ScreenWidth<640) listBoxGap = 2; 
  else listBoxGap = 4;
  
  InitCharacters();
  Initialize_POI();
  Initialize_Notes();
  Initialize_SaveFileStruct();
  Initialize_Save_Load();
}

function on_key_press(eKeyCode keycode) {
  // called when a key is pressed. keycode holds the key's ASCII code
  
  // --- PAUSE-GUI ---
  if (keycode == eKeySpace)
  {
    // SPACEBAR
    if (!IsGamePaused()) {
      PauseGame();
      AdjustGUIText();
      gPaused.Visible=true;
    }
    else {
      gPaused.Visible=false;
      UnPauseGame();
      SetAction(eMA_Default);
      ActionLine.TextColor=ActionLabelColorHighlighted;      
      CheckDefaultAction();
      UpdateActionBar();
    }
  }
  // --- RESTART-GUI ---
  else if (gRestart.Visible) {

    // if exit gui is on
    if (keycode==key_u_no || keycode == key_l_no) {gRestart.Visible=false; SetVisibilityGUI(gBlackberry_Options);} // if N is pressed continue
    if (keycode==key_u_yes || keycode == key_l_yes) RestartGame(); // if Y is pressed restart game
  }
  // --- QUITGAME-GUI ---
  if (gConfirmexit.Visible) {
    // if exit gui is on
    if (keycode==key_u_no || keycode==key_l_no) gConfirmexit.Visible=false; // if N is pressed continue
    if (keycode==key_u_yes || keycode==key_l_yes) QuitGame(0);       // if Y is pressed quit game
  }
  
  // Translate GUIs on keypress
  if (keycode == eKeyF5 || keycode == eKeyF8 || keycode == eKeyCtrlC) AdjustGUIText();
  
  // 
  if (keycode == eKeyF5) SetVisibilityGUI(gOptions);            // F5 - OPTIONS
  if (keycode == eKeyF8) SetVisibilityGUI(gRestart);            // F8 - RESTART
  if (keycode == eKeyCtrlC) SetVisibilityGUI(gConfirmexit);          // Ctrl-C - QUIT
  if (keycode == eKeyF12)   SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug (0, 0);                     // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug (1, 0);                     // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug (2, 0);                     // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug (3, 0);                     // Ctrl-X, teleport to room
 
  
  // --- triggering actions by the keys:---
  
  if (!IsGamePaused()) {
    int act_i=0;
    while (act_i<A_COUNT_) {
      if (keycode == action_l_keycode[act_i] || keycode==action_u_keycode[act_i]) {
        SetAction(act_i);
        act_i=A_COUNT_;
      }
      else {
        act_i++;
      }
    }
  }
}

function on_event(EventType event, int data) {
  if (event==eEventLeaveRoom) 
  if (event==eEventRestoreGame) {
    AdjustLanguage();
  }
  if (event==eEventEnterRoomBeforeFadein || event==eEventRestoreGame)
    player.PlaceOnWalkableArea();
}


////////////////////////////////////////////////////////////////////////////////////
// GUI handling
////////////////////////////////////////////////////////////////////////////////////

function Action_Click(GUIControl *control, MouseButton button) {
  Action tempbutton = getButtonAction(control.ID);
  SetAction(tempbutton);
}

function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control==InvUp) MainInv.ScrollUp();
  else MainInv.ScrollDown();
}

function Options_Click(GUIControl *control, MouseButton button) {
	if (control==OptionsSave)	{
		//save game
    SetVisibilityGUI(gOptions);
		GetLucasSavegameListBox(SaveListBox);
    SetVisibilityGUI(gSave);
	}
	if (control==OptionsLoad)	{
		//load game
		SetVisibilityGUI(gOptions);
		GetLucasSavegameListBox(RestoreListBox);
    RestoreListBox.TopItem=0;
    SetVisibilityGUI(gRestore);
	}
	if (control==OptionsPlay)	{
		// continue playing
		SetVisibilityGUI(gOptions);
	}
	if (control==OptionsQuit)	{
		// exit??
    gOptions.Visible=false;
		gConfirmexit.Visible=true;
	}
}

function OptionsRestart_OnClick(GUIControl *control, MouseButton button)
{ 
  player.ChangeRoom(thisSaveFile.currentRoom, thisSaveFile.x, thisSaveFile.y);
}

function OptionsDefault_OnClick(GUIControl *control, MouseButton button)
{
  OptionsSldMusic.Value = 80;
  OptionsSldSound.Value = 90;
  OptionsSldSpeed.Value = 40;
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeMusic, OptionsSldMusic.Value, eVolExistingAndFuture);  
  Game.SetAudioTypeVolume(eAudioTypeSound, OptionsSldSound.Value, eVolExistingAndFuture); 
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound, OptionsSldSound.Value, eVolExistingAndFuture); 
#endif

#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetSoundVolume(OptionsSldSound.Value);
  SetMusicVolume(OptionsSldMusic.Value);
#endif
  SetGameSpeed(OptionsSldSpeed.Value);
}

function OptionsSldMusic_OnChange(GUIControl *control)
{
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeMusic, OptionsSldMusic.Value, eVolExistingAndFuture);
#endif
#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetMusicVolume(OptionsSldMusic.Value);
#endif

}
function OptionsSldSound_OnChange(GUIControl *control)
{
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeSound, OptionsSldSound.Value, eVolExistingAndFuture); 
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound, OptionsSldSound.Value, eVolExistingAndFuture); 
#endif
#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetSoundVolume(OptionsSldSound.Value);
#endif  

}


function OptionsSldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(OptionsSldSpeed.Value);
}

/*
function Restore_Click(GUIControl *control, MouseButton button) {
  switch(control)
  {
    case RestoreCancel:
      gRestore.Visible=false;
      SetVisibilityGUI(gBlackberry_Options);
      break;
    case RestoreScrollUp:
      GStopsaveitem -= 5;
      if(GStopsaveitem < 0)
        GStopsaveitem = 0;
        
      RestoreListBox.TopItem = GStopsaveitem;
      break;
    case RestoreScrollDown:
      if(RestoreListBox.ItemCount > RestoreListBox.SelectedIndex){
        if (GStopsaveitem < 90) {
          GStopsaveitem += 5;
          if(RestoreListBox.ItemCount < GStopsaveitem)
            GStopsaveitem = RestoreListBox.ItemCount;
        
          RestoreListBox.TopItem=GStopsaveitem;
        }
      }
      break;      
  }
  /*if (control==RestoreScrollUp)	{
  	if (GStopsaveitem < 5) GStopsaveitem = 0;
  	else GStopsaveitem -= 5;
  	RestoreListBox.TopItem=GStopsaveitem;
  }
}*/
/*
function RestoreListBox_Click(GUIControl *control) {
  int index = RestoreListBox.SelectedIndex;
  String buffer=Game.GetSaveSlotDescription(index+100);
  if (buffer!=null) {
    gRestore.Visible = false;
    gRestore.Clickable = false;
    RestoreGameSlot(index + 100);
  } 
}*/

/*
function Save_Click(GUIControl *control, MouseButton button) {
	int index = SaveListBox.SelectedIndex;
	String buffer;
  switch(control)
  {
    case SaveCancel:
      gSavetextbox.Visible=false;
      SetVisibilityGUI(gSave);
      SetVisibilityGUI(gBlackberry_Options);
      break;
    case SaveOK:
      if(index >= 0)
      {
        buffer=SaveTextBox.Text;
        SetVisibilityGUI(gSave);
        gSavetextbox.Visible=false;
        SaveGameSlot (index + 100, buffer);
      }
      break;
    case SaveScrollUp:
      gSavetextbox.Visible=false;
      SaveListBox.SelectedIndex=-1;
      if (GStopsaveitem < 5) GStopsaveitem = 0;
      else GStopsaveitem -= 5;
      SaveListBox.TopItem=GStopsaveitem;
      break;
    case SaveScrollDown:
      if(GStopsaveitem < 90 && SaveListBox.ItemCount > 5)
      {
        gSavetextbox.Visible=false;
        SaveListBox.SelectedIndex=-1;
        GStopsaveitem += 5;
        if(SaveListBox.ItemCount < GStopsaveitem)
          GStopsaveitem = SaveListBox.ItemCount;
          
        SaveListBox.TopItem=GStopsaveitem;
      }
      break;
  }
}*/
/*
function SaveListBox_Click(GUIControl *control) {
  int saveBox_ypos;
  int saveBox_xpos;
 	int index = SaveListBox.SelectedIndex;

	String buffer=String.Format("%d.", index+1);
	SaveLabel.Text=buffer;
	buffer=Game.GetSaveSlotDescription(index+100);
	if (buffer==null) buffer="";
	SaveTextBox.Text=buffer;
	
  saveBox_ypos = gSave.Y + SaveListBox.Y + ((index - GStopsaveitem) * (GetTextHeight(SaveLabel.Text, SaveLabel.Font, SaveLabel.Width)+listBoxGap));
  saveBox_xpos = GetTextWidth(SaveLabel.Text, SaveLabel.Font);
  SaveTextBox.SetPosition(saveBox_xpos, 0);
  
  gSavetextbox.SetPosition(gSave.X + SaveListBox.X, saveBox_ypos);
	gSavetextbox.Visible=true;
}

function SaveTextBox_Click(GUI *theGui, MouseButton button) {
  if (mouse.IsButtonDown(eMouseRight)) gSavetextbox.Visible=false;  
}*/

//////////////////////////////////////////////////////////////////////////
///////////////////Custom FUNCTIONS//////////////////////////////////
//////////////////////////////////////////////////////////////////////////

// ```````````````````````` GUI BUTTONS ```````````````````````` //

void TitleButtons_OnClick(GUIControl* control,  MouseButton button)
{
  switch(control)
  {
    case btnNew:
      tDays = 0;
      tHours = 0.0;
      Day0Rooms();
      SetMorningDialog();
      SetTimeLabel();
      player.ChangeRoom(5);
      MapNewGame();
      SetVisibilityGUI(gTitle);
      break;
    case btnLoadGame:
      SetVisibilityGUI(gLoad2);
      break;
    case btnOptions:
      SetVisibilityGUI(gOptions2);
      break;
    case btnExit_Title:
      SetVisibilityGUI(gConfirm);
      break;
    default:
      break;
  }
}

void MainGUIButtons_OnClick(GUIControl* control,  MouseButton button)
{// Is called when a main gui button control is clicked;
  bool changedState = false; // stores the changed state and sets the default to false;
  /* Checks which button is pressed and then checks the state of the gui for that button; */
  switch(control)
  {
    case btnBlackBerry:
      changedState = GetDisplayState(gBlackberry_Main);
      if(changedState)
        SetVisibilityGUI(gBlackberry_Main);
      else if(GetDisplayState(gBlackberry_Options))
      {
        changedState = true;
        SetVisibilityGUI(gBlackberry_Options);
      }else if(GetDisplayState(gPOI))
      {
        changedState = true;
        SetVisibilityGUI(gPOI);
      }else if(GetDisplayState(gNotes))
      {
        changedState = true;
        SetVisibilityGUI(gNotes);
      }
      break;
    case btnMap:
      changedState = GetDisplayState(gMap);
      if(changedState)
        SetVisibilityGUI(gMap);
      break;
    case btnNotes:
      changedState = GetDisplayState(gNotes);
      if(changedState)
        SetVisibilityGUI(gNotes);
      break;
    case btnItems:
      changedState = GetDisplayState(gItems);
      if(changedState)
      {
        SetVisibilityGUI(gItems);
        SetVisibilityGUI(gActions);
      }
      break;
    /*case btnDialog:
      changedState = GetDisplayState(gDialogH);
      if(changedState)
        SetVisibilityGUI(gDialogH);
      break;*/
    default:
      break;
  }
  /****************************************************************************************/
  
  if(changedState)
  {// if the state of the guis is changed then adjust the state of the control to reflect that change.
    MakeButtonsClickable(control); // Sets the clickable state of the control to it's opposite state.
    control.Clickable = !control.Clickable; // Due to the method used for the MakeButtonsClickable this state needs to be refixed for the main gui.
    if(CheckAllDisplayStates())
      gActiongui.Visible = false;
    else
      gActiongui.Visible = true;
  }
}

void GetImageToDisplay(GUI* control)
{
  Display_Selected();
}

void Entry(GUI* control)
{
  HandleNewEntry();
}

void BlackBerryMainButtons_OnClick(GUIControl* control, MouseButton button)
{
  SetVisibilityGUI(gBlackberry_Main);
  
  switch(control)
  {
    case btnPOI: 
      SetVisibilityGUI(gPOI);
      break;
    case btnJournal:
      SetVisibilityGUI(gNotes);
      break;
    case btnPictures:
      SetVisibilityGUI(gBlackberry_Main);
      break;
    case btnCalendar:
      SetVisibilityGUI(gBlackberry_Main);
      break;
    case btnOpt:
      SetVisibilityGUI(gBlackberry_Options);
      break;
    default:
      break;
  }
}

void BlackBerryOptions_OnClick(GUIControl* control, MouseButton button)
{
  SetVisibilityGUI(control.OwningGUI);
  switch(control)
  {    
    case btnBack:
      SetVisibilityGUI(gBlackberry_Main);
      break;
    case btnAudio: Display("Audio"); SetVisibilityGUI(control.OwningGUI);
      break;
    case btnRestart:
      SetVisibilityGUI(gRestart);
      break;
    case btnSave:
      SetVisibilityGUI(gSave2);
      break;
    case btnLoad:
      SetVisibilityGUI(gLoad2);
      break;
    case btnExit:
      SetVisibilityGUI(gConfirm);
      break;
  }
}

void Back_FromExtendedBlackBerry(GUIControl* control, MouseButton button)
{
  switch(control)
  {
    case btnPOI_Close:
      break;
    case btnNotes_Close:
      if(btnNotes.NormalGraphic != 36)
      {
        MakeButtonsClickable(btnNotes);
        btnNotes.Clickable = true;
      }
      
      if(btnBlackBerry.NormalGraphic == 37)
      {
        MakeButtonsClickable(btnBlackBerry);
        btnBlackBerry.Clickable = true;
      }
      break;
    default:
      break;
  }
  SetVisibilityGUI(control.OwningGUI);
  SetVisibilityGUI(gBlackberry_Main);
}

function btnCancel_OnClick(GUIControl* control, MouseButton button)
{
  if(player.Room != 300)
    SetVisibilityGUI(gBlackberry_Options);
    
  SetVisibilityGUI(control.OwningGUI);
}

String StoredFileString(ListBox* lst)
{// Gets the String of the item selected in the passed in listBox.
  return saveFileString[lst.SelectedIndex];
}

void AddToSave(String s)
{ // Adds the name of the file to the stored file indices.
  int i = 0;
  for(i = 49; i > 1; i--)
  {
    if(saveFileString[i] != "" && i == 49)
    {
      File.Delete(ConstructFilePath("%GAMESAVEDIR%/", saveFileString[i], ".txt"));
    }
    saveFileString[i] = saveFileString[i-1];
  }
  if(i == 1)saveFileString[i] = s;
}

void UpdateSaveInfo()
{ // Updates the SaveFile Structure thisSaveFile.
  //---Sets the room the player is in and the players location in the room.---//
  thisSaveFile.currentRoom = player.Room;
  thisSaveFile.x = player.x;
  thisSaveFile.y = player.y;
  //--------------------------------------------------------------------------//
  
  //---Sets the number of characters met and the name of the character along with their imageToUse number---//
  int i = 0;
  thisSaveFile.numCharactersMet = GetNumCharacters();
  for(i = 0; i < thisSaveFile.numCharactersMet; i++)
    thisSaveFile.metCharacters[i] = GetMetCharacters(i);
    
  for(i = 0; i < thisSaveFile.numCharactersMet; i++)
    thisSaveFile.imageToUse[i] = GetImageToUse(i);
  //--------------------------------------------------------------------------------------------------------//
  
  //---Sets the time and the loop of the world---//
  thisSaveFile.day = tDays;
  thisSaveFile.hour = tHours;
  thisSaveFile.loop = tLoops;
  //---------------------------------------------//
  
  //---Sets the number of notes the player has taken and records those notes---//
  thisSaveFile.notesCount = GetNotesCount();
  for(i = 0; i < thisSaveFile.notesCount; i++)
    thisSaveFile.playerNotes[i] = RetrieveNote(i);
  //---------------------------------------------------------------------------//
}

void SaveFile(File* f)
{ // Writes the Saved information into the passed in file.
  String s, i; // Variables for reading and writing to file.
  
  s = ""; // Stores the accumalted Strings for writing.
  i = ""; // Translates the variables to strings and adds a new line then reads them into s.
  if(thisSaveFile.prfmrdAction)i = "True"; // Sets i to the result of prfmrdAction
  else
    i = "False";'

  f.WriteRawLine(i);
  
  //---Sets i to the day, hour and loop and reads in after each set.---//
  i = String.Format("%d", thisSaveFile.day); 
  f.WriteRawLine(i);
  
  i = String.Format("%f", thisSaveFile.hour);
  f.WriteRawLine(i);
  
  i = String.Format("%d", thisSaveFile.loop);
  f.WriteRawLine(i);
  //-------------------------------------------------------------------//
  
  //---Sets i to write in the room and location of the player character.---//  
  i = String.Format("%d", thisSaveFile.currentRoom);
  f.WriteRawLine(i);
  
  i = String.Format("%d", thisSaveFile.x);
  f.WriteRawLine(i);
  
  i = String.Format("%d", thisSaveFile.y);
  f.WriteRawLine(i);
  //-----------------------------------------------------------------------//
  
  //---Sets i to write in the number of notes and characters met.---//
  i = String.Format("%d", thisSaveFile.notesCount);
  f.WriteRawLine(i);
  
  i = String.Format("%d", thisSaveFile.numCharactersMet);
  f.WriteRawLine(i);
  //----------------------------------------------------------------//
  
  //---Sets i to write in the image to use and the name of the met character.---//
  int t = 0;
  for(t = 0; t < thisSaveFile.numCharactersMet; t++)
  {
    i = String.Format("%d", thisSaveFile.imageToUse[t]);
    f.WriteRawLine(i);
    
    i = thisSaveFile.metCharacters[t];
    f.WriteRawLine(i);
  }
  //----------------------------------------------------------------------------//
  
  //---Sets i to write in the stored note at location t.---//
  for(t = 0; t < thisSaveFile.notesCount; t++)
  {
    i = thisSaveFile.playerNotes[t];
    f.WriteRawLine(i);
  }
  //-------------------------------------------------------//
}

void Save(GUIControl* control, MouseButton button)
{ // Controls whether or not a file gets saved.
  String temp = "", temp2 = "";
  bool override = false, confirm = false;
  temp = StoredFileString(lstSave);
  
  if(temp != "New Save")
  {
    temp2 = temp;
    temp = ConstructFilePath("$SAVEGAMEDIR$/", temp, ".txt");
  }else
  { // Checks to see if the txtbox that takes the new file name is filled or not.
    if(txtSaveInput.Text == "") {Display("You must enter a name for the file."); return;}
    else
      temp = ConstructFilePath("$SAVEGAMEDIR$/", txtSaveInput.Text, ".txt");
      
    temp2 = txtSaveInput.Text;
  }
  if(File.Exists(temp))
  { // Checks to see if the file already exists.
  
    // Check to see if they wish to override the file.
    if(override == false)return;
  }
  
  if(override == true)confirm = true; // if the player wishes to override the file then it is automatically confirmed.
  
  confirm = true;
  if(confirm != true)
  { // Confirms save if the file is not being overriden.
    // Confirm new file.
  }
  
  if(confirm == true)
  {// Saves the file.
    File* f;
    f = File.Open(temp, eFileWrite);
    UpdateSaveInfo();
    SaveFile(f);
    f.Close();
    AddToSave(temp2);
    PopulateSaveLoadLists();
  }
}

void GetLoadFileData(File* f)
{// Gets the stored data from the passed in file.
  String s; // String variable to read from the file.
  s = f.ReadRawLineBack(); // reads back the first line of the file.
  
  if(s == "True")// compares the expected value of the String and sets the prfmrdAction state.
    thisSaveFile.prfmrdAction = true;
  else if(s == "False")
    thisSaveFile.prfmrdAction = false;
  else
    Display("Error!");
  
  // Sets the day, hour, and loop to the read in values.---//
  s = f.ReadRawLineBack();
  thisSaveFile.day = s.AsInt;
  
  s = f.ReadRawLineBack();
  thisSaveFile.hour = s.AsFloat;
  
  s = f.ReadRawLineBack();
  thisSaveFile.loop = s.AsInt;
  //-------------------------------------------------------//
  
  //---Sets the currentRoom and x and y locations to the read in values.---//
  s = f.ReadRawLineBack();
  thisSaveFile.currentRoom = s.AsInt;
  
  s = f.ReadRawLineBack();
  thisSaveFile.x = s.AsInt;
  
  s = f.ReadRawLineBack();
  thisSaveFile.y = s.AsInt;
  //-----------------------------------------------------------------------//
  
  //---Sets the notesCount and numCharactersMet---//
  s = f.ReadRawLineBack();
  thisSaveFile.notesCount = s.AsInt;
  
  s = f.ReadRawLineBack();
  thisSaveFile.numCharactersMet = s.AsInt;
  //----------------------------------------------//
  
  //---Sets the imageToUse and the met character to their respective property.---//
  int i = 0;
  for(i = 0; i < thisSaveFile.numCharactersMet; i++)
  {
    s = f.ReadRawLineBack();
    thisSaveFile.imageToUse[i] = s.AsInt;
    
    s = f.ReadRawLineBack();
    thisSaveFile.metCharacters[i] = s;
  }
  //-----------------------------------------------------------------------------//
  
  //---Sets the note to its respective position---//
  for(i = 0; i < thisSaveFile.notesCount; i++)
  {
    s = f.ReadRawLineBack();
    thisSaveFile.playerNotes[i] = s;
  }
  //----------------------------------------------//  
}

void ApplyLoad()
{ // applies the load information to the game state.
  //---Updates the time of the game across the guis and the game run time variables---//
  performedAction = thisSaveFile.prfmrdAction;
  tDays = thisSaveFile.day;
  tHours = thisSaveFile.hour;
  tLoops = thisSaveFile.loop;
  UpdateCalendar();
  SetTimeLabel();
  lstPOI.Clear();
  //----------------------------------------------------------------------------------//
  
  //---Updates the rooms according to the day---//
  switch(tDays)
  {
    case 0: Day0Rooms();
      break;
    case 1: Day1Rooms();
      break;
    case 2: Day2Rooms();
      break;
    case 3: Day3Rooms();
      break;
  }
  //--------------------------------------------//
  SetMorningDialog();
  //---Updates the rooms if they hours is not in the morning---//
  switch(tHours)
  {
    case 4.5: Noon(); SetNoonDialog();
      break;
    case 9.0: Evening(); SetEveningDialog();
      break;
    case 13.5: Night(); SetNightDialog();
      break;
  }
  //-----------------------------------------------------------//
  
  SetNumCharacters(thisSaveFile.numCharactersMet); // Sets the number of characters that have been met for the loaded game.
  
  int i = 0; // index variable to be stepped through.
  
  for(i = 0; i < thisSaveFile.numCharactersMet; i++)
  { //---Updates the poi gui to get the already met characters---//
    SetMetCharacters(i, thisSaveFile.metCharacters[i]);
    SetImageToUse(i, thisSaveFile.imageToUse[i]);
    lstPOI.AddItem(thisSaveFile.metCharacters[i].Substring(0, 7));
    //-----------------------------------------------------------//
  }
  SetVisibilityGUI(gLoad2);
  player.ChangeRoom(thisSaveFile.currentRoom, thisSaveFile.x, thisSaveFile.y); // Changes the players room to their loaded game saved room.
}

void LoadFromSave(GUIControl* control, MouseButton button)
{ // Loads the selected file information.
  String temp;
  temp = ConstructFilePath("$SAVEGAMEDIR$/", StoredFileString(lstLoad), ".txt");
  if(File.Exists(temp))
  {
    File* f = File.Open(temp, eFileRead);
    GetLoadFileData(f);
    f.Close();
    if(player.Room == 300)
      SetVisibilityGUI(gTitle);
    else
    {
      MakeButtonsClickable(btnBlackBerry);
      btnBlackBerry.Clickable = true;
    }
      
    ApplyLoad();
  }else
    Display("No file found!");
}

void DeleteSave(GUIControl* control, MouseButton button)
{
  String s;
  s = ConstructFilePath("$SAVEGAMEDIR$/", StoredFileString(lstLoad), ".txt");
  File.Delete(s);
}

void LeaveGame(GUIControl* control, MouseButton button)
{
  String s;
  s = ConstructFilePath("$SAVEGAMEDIR$/", "MMiM", ".txt");
  File* f = File.Open(s, eFileWrite);
  int i = 0;
  for(i = 1; i < 49; i++)
  {
    if(saveFileString[i] != "")
    {
      f.WriteRawLine(saveFileString[i]);
    }
  }
  f.Close();
  QuitGame(0);
}

/*void GetLoadOptions()
{
  String s;
  s = ConstructFilePath("$SAVEGAMEDIR$/", "MMiM", ".txt");
  File* f = File.Open(s, eFileRead);
  int i = 0;
  for(i = 0; i < 49; i++)
  {
    lstLoad.AddItem(f.ReadStringBack());
  }
}*/
/* Character, Object, Hotspot full blown SAMPLE
function cChar_AnyClick() {

  // TALK TO (characters only)
  if (UsedAction(eGA_TalkTo)) {
    Unhandled();
  }
  // LOOK AT
  else if(UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // OPEN
  else if(UsedAction(eGA_Open)) {
    Unhandled();
  }  
  // CLOSE
  else if(UsedAction(eGA_Close)) {
    Unhandled();
  }
  // USE
  else if(UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(UsedAction(eGA_Pull)) {
    Unhandled();
  } 
  // PICKUP
  else if(UsedAction(eGA_PickUp)) {
    Unhandled();
  }
  // GIVE TO (characters only)
  else if(UsedAction(eGA_GiveTo)) {
    Unhandled();
  }  
  //USE INV
  else if(UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();
}
*/

/* Inventory SAMPLE
  // LOOK AT
  else if(UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // USE
  else if(UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(UsedAction(eGA_Pull)) {
    Unhandled();
  }   
  //USE INV
  else if(UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();
*/

///////////////////////////////////////////////// People /////////////////////////////////////////////////
function cAbigailB_AnyClick()
{ 
  performedAction = true;
  // TALK TO
  if (UsedAction(eGA_TalkTo)) {
    ch_TalkTo(cAbigailB);
    Add_Character(cAbigailB);
  }
  else Unhandled();
}

function cMary_AnyClick()
{ 
  performedAction = true;
  // TALK TO
  if (UsedAction(eGA_TalkTo)) 
  {
    ch_TalkTo(cMary);
    Add_Character(cMary);
  }
  else Unhandled();
}

function cOliverFr_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cOliverFr);
    Add_Character(cOliverFr);
  }
  else Unhandled();
}

function cPeterP_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cPeterP);
    Add_Character(cPeterP);
  }
  else Unhandled();
}

function cMichelleP_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cMichelleP);
    Add_Character(cMichelleP);
  }
  else Unhandled();
}

function cPeterP2_AnyClick()
{
    performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cPeterP);
    Add_Character(cPeterP2);
  }
  else Unhandled();
}

function cParkerP_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cParkerP);
    Add_Character(cParkerP);
  }
  else Unhandled();
}

function cPaulP_AnyClick()
{
    performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cPaulP);
    Add_Character(cPaulP);
  }
  else Unhandled();
}

function cPatrickP_AnyClick()
{
    performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cPatrickP);
    Add_Character(cPatrickP);
  }
  else Unhandled();
}
function cWilliamOK_AnyClick()
{
  performedAction = true;
  if(UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cWilliamOK);
    Add_Character(cWilliamOK);
  }
  else Unhandled();
}
  
 function cMichaelH_AnyClick()
 {
   performedAction = true;
   if(UsedAction(eGA_TalkTo))
   {
     ch_TalkTo(cMichaelH);
     Add_Character(cMichaelH);
   }
   else Unhandled();
   }

function cTracyH_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cTracyH);
    Add_Character(cTracyH);
  }
  else Unhandled();
}

function cMichealH_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cMichealH);
    Add_Character(cMichealH);
  }
  else Unhandled();
}

function cMathewH_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cMathewH);
    Add_Character(cMathewH);
  }
  else Unhandled();
}

function cMiriamH_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cMiriamH);
    Add_Character(cMiriamH);
  }
  else Unhandled();
}

function cRichardL_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cRichardL);
    Add_Character(cRichardL);
  }
  else Unhandled();
}

function cDanielleL_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cDanielleL);
    Add_Character(cDanielleL);
  }
  else Unhandled();
}

function cDaphneL_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cDaphneL);
    Add_Character(cDaphneL);
  }
  else Unhandled();
}

function cRachelL_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cRachelL);
    Add_Character(cRachelL);
  }
  else Unhandled();
}

function cAlexanderN_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cAlexanderN);
    Add_Character(cAlexanderN);
  }
  else Unhandled();
}

function cValerieN_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cValerieN);
    Add_Character(cValerieN);
  }
  else Unhandled();
}

function cAudreyN_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cAudreyN);
    Add_Character(cAudreyN);
  }
  else Unhandled();
}

function cAnnaN_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cAnnaN);
    Add_Character(cAnnaN);
  }
  else Unhandled();
}

function cMargaretMcC_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cMargaretMcC);
    Add_Character(cMargaretMcC);
  }
  else Unhandled();
}

function cJosephMcC_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cJosephMcC);
    Add_Character(cJosephMcC);
  }
  else Unhandled();
}

function cStephenS_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cStephenS);
    Add_Character(cStephenS);
  }
  else Unhandled();
}

function cFrederickS_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cFrederickS);
    Add_Character(cFrederickS);
  }
  else Unhandled();
}

function cLuke_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cLuke);
    Add_Character(cLuke);
  }
  else Unhandled();
}

function cMaria_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cMaria);
    Add_Character(cMaria);
  }
  else Unhandled();
}

function cEarl_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cEarl);
    Add_Character(cEarl);
  }
  else Unhandled();
}

function cJanet_AnyClick()
{
  performedAction = true;
  
  if (UsedAction(eGA_TalkTo))
  {
    ch_TalkTo(cJanet);
    Add_Character(cJanet);
  }
  else Unhandled();
}

///////////////////////////////////////////////// Objects /////////////////////////////////////////////////
function iEnvClose_OtherClick()
{
  performedAction = true;
  if(UsedAction(eGA_Use)) {
    player.Say("Let's have a look...");
    Wait(5);
    player.LoseInventory(iEnvClose);
    player.AddInventory(iEnvOpen);
    Wait(5);
    player.Say("There's indeed a key inside this envelope.");
    player.AddInventory(iKey);
  }
  else if (UsedAction(eGA_LookAt))
  {
    player.Say("Beman gave me this.");
    player.Say("It seems like it's not empty.");
  }
  else Unhandled();
}

function iEnvOpen_OtherClick()
{
  performedAction = true;
  if (UsedAction(eGA_LookAt))
  {
    player.Say("An empty envelope.");
  }
  else if(UsedAction(eGA_UseInv)) {
    if (player.ActiveInventory == iKey) {   
      player.Say("I'll better put it back again.");
      Wait(5);
      player.LoseInventory(iKey);
      Wait(5);
      player.LoseInventory(iEnvOpen);
      player.AddInventory(iEnvClose);  
    }
    else Unhandled();
  }
  else Unhandled();
}

function iKey_OtherClick()
{
  if(UsedAction(eGA_LookAt)) {
    player.Say("It's a small key.");
  }
  else Unhandled();
}
function gMMOptionReturn_OnClick(GUIControl *control, MouseButton button)
{
  SetVisibilityGUI(control.OwningGUI);
}


///////////////////////////////////////////////// Map /////////////////////////////////////////////////

function Check_ChangeRoom(int n)
{
  if(player.Room == n)return false;
  
  return true;
}

function MapButton_OnClick(GUIControl* control, MouseButton button)
{
  bool switchRoom = false;
  int n, x, y;
  
  switch(control)
  {
    case btnMary: n = 5; x = 233; y = 174;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnPolice: n = 13; x = 591; y = 183;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnGerald: n = 9; x = 160; y = 185;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnKKitchen: n = 19; x = 202; y = 193;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnChurch: n = 14; x = 303; y = 194;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnPeters: n = 17; x = 21; y = 186;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnTaxidermy: n = 15; x = 377; y = 141;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnLegion: n = 31; x = 84; y = 179;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnGas: n = 12; x = 147; y = 187;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnLibrary: n = 11; x = 83; y = 177;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnSwamp: n = 20; x = 37; y = 143;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnTHall: n = 18; x = 240; y = 195;
      switchRoom = Check_ChangeRoom(n);
      break;
    case btnHartman: n = 6; x = 17; y = 8;
      switchRoom = Check_ChangeRoom(n);
      break;
  }
  
  if(switchRoom)
  {
    WatchTime();
    player.ChangeRoom(n, x, y);
    SetVisibilityGUI(gMap);
    MakeButtonsClickable(btnMap);
    btnMap.Clickable = true;
    if(tLoops == 0)
      MakeButtonsClickable(control);
  }  
}

export PuzzleStates;
function dialog_request(int param) {
}

