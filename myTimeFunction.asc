
void EndGame()
{cJimmy.Say("That's all folks!");}

void UpdateCalendar()
{ // Updates the Calendar in the Blackberry GUI;
  /* Sets the Calendar button graphics according to the day; */
  switch(tDays)
  {
    case 0: // Date is the 20th
      btnCalendar.NormalGraphic = 351;
      btnCalendar.MouseOverGraphic = 351;
      btnCalendar.PushedGraphic = 352;
      break;
    case 1: // Date is the 21st
      btnCalendar.NormalGraphic = 353;
      btnCalendar.MouseOverGraphic = 353;
      btnCalendar.PushedGraphic = 354;
      break;
    case 2: // Date is the 22nd
      btnCalendar.NormalGraphic = 355;
      btnCalendar.MouseOverGraphic = 355;
      btnCalendar.PushedGraphic = 356;
      break;
    case 3: // Date is the 23rd
      btnCalendar.NormalGraphic = 357;
      btnCalendar.MouseOverGraphic = 357;
      btnCalendar.PushedGraphic = 358;
      break;
  }
  /***********************************************************/
}

function UpdateMyTime()
{ // Simulate time while staying within a set schedule;
  tHours += tStep;
  // Adjusts hours by the amount determined by tStep;
  
  /* sets the room states based on the shift of significant time within any given day; */
  switch(tHours)
  {
    case 4.5: Noon(); SetNoonDialog();
      break;
    case 9.0: Evening(); SetEveningDialog();
      break;
    case 13.5: Night(); SetNightDialog();
      break;
  }
  /*************************************************************************************/
  
  if(tHours < 18.0)return; // Ends the function early if time has not progressed to the next day;
    
  tHours = 0.0; // set the hours back to start value;
  tDays++; // Proceed to next day;
  
  /* Sets the base room for each shift in days; */
  switch(tDays)
  {
    case 0: Day0Rooms();
      break;
    case 1: Day1Rooms();
      break;
    case 2: Day2Rooms();
      break;
    case 3: Day3Rooms();
      break;
  }
  /**********************************************/
  
  if(tDays < 4)
  {
    SetMorningDialog(); // Sets the morning dialog for the new day;
    UpdateCalendar(); // Updates the calendar with the new correct day;
    return; // Ends the function early if not going to the next loop;
  }
    
  tDays = 1; // Sets the days to the 2nd playable day;
  tLoops++; // Proceeds to the next loop;
  
  SetMorningDialog(); // Sets the morning dialog for the new day;
  UpdateCalendar(); // Updates the calendar with the new correct day;
  
  /* Sets the data for the appropriate loop; */
  switch(tLoops)
  {
    case 1: Day1Rooms(); BeginLoops();
      break;
    case 2:
    case 3:
    case 4: Day1Rooms();
      break;
    default: EndGame();
      break;
  }
  /*******************************************/
}

void SetTimeLabel()
{// Sets the appropriate time for the give day and hours to the in game labels that should display the time;
  String days, hours;
  // initializes the strings for the day and hour;
  
  /* Assigns the appropriate day for the given day to the days string; */
  switch(tDays)
  {
    case 0: days = "Tuesday";
      break;
    case 1: days = "Wednesday";
      break;
    case 2: days = "Thursday";
      break;
    case 3: days = "Friday";
      break;
  }
  /*********************************************************************/
  
  /* Assigns the appropriate time period for the given hours to the hours string; */
  switch(tHours)
  {
    case 0.0: hours = "Morning";
      break;
    case 4.5: hours = "Noon";
      break;
    case 9.0: hours = "Evening";
      break;
    case 13.5: hours = "Night";
      break;
  }
  /********************************************************************************/
  
  /* Assigns the strings into the labels for display; */
  lblTime.Text = hours;
  lblTime.Text = lblTime.Text.Append("\n");
  lblTime.Text = lblTime.Text.Append(days);
  
  lblTime2.Text = lblTime.Text;
  
  lblTime3.Text = lblTime.Text;
  
  /****************************************************/
}

function WatchTime()
{ // Keeps track of the time according to the set of performed actions;
  
  if(!performedAction)return;
  // Ends the function if a significant action has not been performed;
  
  UpdateMyTime();
  // After a significant action has occured and when the WatchTime function is called move the time forward;
  
  SetTimeLabel();
  // After time has been updated, update the displayed time in the gBlackberry gui;
  
  performedAction = false;
  // sets the performed action to false to prevent a time update when the player has not performed a significant action;
}
