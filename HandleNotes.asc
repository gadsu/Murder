// new module script

String player_Notes[1000];
int notesCount;
int labelCharSize = 126;
int labelMaxRows = 9;
int numCharacters;
int filterCount;

function GetNotesCount()
{
  return notesCount;
}

String RetrieveNote(int i)
{
  return player_Notes[i];
}

function DisplayNewNotes()
{
  int i = 0;
  for(i = 0; i < filterCount; i++)
  {
    if(i < labelMaxRows)
    {
      if(i == 0)
        lblNotes.Text = player_Notes[(notesCount - 1)];
      else
        lblNotes.Text = lblNotes.Text.Append(player_Notes[(notesCount - i - 1)]);
        
      lblNotes.Text = lblNotes.Text.Append("\n");
    }
  }
}

void FilterNotes()
{
  filterCount = 0;
  numCharacters = 0;
  do
  {
    numCharacters += player_Notes[(notesCount - filterCount - 1)].Length;
    filterCount += 1;
  }while(numCharacters < labelCharSize && filterCount < notesCount);
}

void AddNotes()
{
  if(notesCount < 1000)
  {
    player_Notes[notesCount] = txtNotes.Text;
    txtNotes.Text = "";
    notesCount++;
  }
}

void HandleNewEntry()
{
  if(txtNotes.Text != "")
  {
    AddNotes();
    FilterNotes();
    DisplayNewNotes();
  }
}

function Initialize_Notes()
{
  notesCount = 0;
  numCharacters = 0;
  filterCount = 0;
  
  int i = 0;
  for(i = 0; i < 1000; i++)
    player_Notes[i] = "";
}